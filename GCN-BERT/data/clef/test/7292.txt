FORM 2 THE PATENTS ACT, 1970 (39 oi" 1970) COMPLETE SPECIFICATION Section 10; rule 13 TITLE METHOD FOR PROCESSING A PLURALITY OF INTERNET PROTOCOL PACKETS OF A DIGITAL VIDEO BROADCAST-RETURN CHANNEL VIA SATELLITE (DVB-RCS)HUB APPLICANT Indian Space Research Organisation ISRO Headquarters, Department of Space Antariksh Bhavan New BEL Road Bangalore 560094 India Nationality : a Government of India Organization The following specification particularly describes the nature of this invention and the mailer in which it is to be performed FIELD OF THE INVENTION The present invention relates to the fields of satellite-based data communication systems. The present invention specifically relates to a PC based IP packet processing in DVB-RCS hub. BACKGROUND OF THE INVENTION One of the preferred satellite-based technologies for networking on a large scale is a Digital Video Broadcast - Return Channel via Satellite (DVBRCS). DVB can be designed primarily with video, but it can also be intended to allow for the delivery of other digital programs. DVB is a broadcast from one point to many and does not provide for data traveling in the opposite direction. RCS (Return Channel via Satellite) satisfies the need for data traveling in the opposite direction, so that the DVB-RCS provides a ner,a'ork topology to ensure that one large data pipe broadcast from one site to many receivers and another data pipe shared by many receivers received at one site, usually referred to as hub. In the present scenario. Internet Protocol (1P) packets are processed with the help of router at the Digital Video Broadcast - Return Channel via Satellite (DVB-RCS) hub. which is operating in a star topology. In the case of forward link, the DVB-RCS hub can transmit the IP packets to end-users via a transport stream. A DVB-RCS compliant forward link transport stream contains contain the IP packets that are destined to remote Satellite Interactive Terminals (SITs). The router can provide routing decisions for data traveling of the IP packets from the DVB-RCS hub to the remote SITs and direct the IP packets in accordance with the routing decisions. In general, these IP packets are processed at the network layer. Since the forward link transport stream generator is provided at an application layer, the IP packets ate required at the application layer instead of network layer for generating the DVB-RCS compliant forward link transport stream. This DVB-RCS compliant forward link transport stream is provided with the Transport Stream (TS) packets at the remote SITs. In addition, the DVB-RCS is an open standard for the air interface, but it is not open in the implementation details of IP packet processing at the hub. Thus, the vendors may utilize its o aa proprietary ways of implementation using specific hardware, in the case of return link, a Multi-Carrier burst Demodulator (MCD) can be utilized lbr receiving the IP packets sent by the remote SITs. The MCD sends the TS packets containing the IP packet data to another process implemented in proprietary hardware and/or firmware. The proprietary hardware and/or firmware can process the TS packets to extract the IP packets from the TS packets Then, these IP packets are sent to the router for further pumping it in to a local area network (LAN) or forward it to the IP over multiprntocol encapsulation (IP-MPE) hardware for sending these packets to another SIT. However, with respect to the con emional DVB-RCS, it is necessary to utilize the standalone router and the proprietary hardware and/or firmware tbr processing the IP packets, which increases the costs of the DVB-RCS hub assembly and also leads to tedious and time-consuming. Therefore, it is desirable to provide an improved IP packet processing br the DVB-RCS hub, which eliminates the need for standalone router and proprietary hardware. OBJECT OF THE INVENTION An object of the present invention is to provide an improved method for processing lP packets in a DVB-RCS hub using a single PC with standard Linux Operating system. Another object of the present invention is to pro-tide an improved module for processing IP packets in a DVB-RCS hub using a single PC with standard Linux Operating system. SUMMARY OF THE INVENTION According to one aspect, the present invention, which achieves this objective, relates to an improved method for processing IP packets at a DVBRCS hub using a single PC with standard Linux Operating system, involving: obtaining the IP packets to be forwarded in a forward link transport stream of the DVB-RCS hub, at an application layer. The IP packets can be encapsulated in the application layer based on an IP over multiprotocol encapsulation (IPMPE) standard, and forwarded to a forward link transport stream generator. Then. the IP encapsulated packets can be sent using a user datagram protocol (UDP) to a satellite interactive terminal (SIT). Similarly, in the remm link, the IP encapsulated packets received from the SIT can be de-capsulated and routed based on a destination address in an IP header of the packets. Then, the IP packets can be pumped into a local LAN or encapsulated and tbrwarded to another SIT. Furthermore, the routing decision of the IP packets can be carried out at the application layer. If the destination address of the lP packets is for the local LAN, the IP packets can be pumped into the local LAN using Raw sockets with the IP header. Similarly, if the destination address of the IP packets is for the LAN connected to other SITs, the IP packets can then be encapsulated and forwarded to the forward link transport stream generator. This method can able to provide the functionality of the IP packet processing at the DVB-RCS hub without the need of a standalone router and without using the proprietary hardware and/or firmware. This method also allows the IP packets to be processed at the application layer instead of the network layer, which achieves easy generation of the IP encapsulated packets. BRIEF DESCRIPTION OF THE DRAWINGS The invention will be discussed in greater detail with reference to the accompanying Figures. FIG. 1 shows a protocol stack at a DVB-RCS hub for user traffic with a SIT, in accordance with an exemplary embodiment of the present invention. FIG. 2 shows a protocol stack at the SIT for user traffic with the DVBRCS hub, in accordance with an exemplary embodiment of the present invention. FIG. 3 illustrates a basic setup used to demonstrate an IP Packet Processing Module, in accordance with an exemplary embodiment of the present invention. FIG. 4 shows a flow chart of a method for processing IP packets at the DVB-RCS hub using a mu!tithreaded implementation, in accordance with an exemplary embodiment of the present invention. DETAILED DESCRIPTION OF THE INVENTION Referring to FIG. 1, a protocol stack at a DVB-RCS hub for user traffic with a SIT is illustrated in accordance with an exemplary embodiment of the present th, mntion. The method as shown in FIG. 4, can utilize the typical DVBRCS protocol stack for easy IP packet processing at the hub using a single PC with standard Linux operating system. In the proposed method, the IP packets can be sent in a forward liilk B of a DVB-RCS network and obtained at the application layer using standard IP tables and IP queue's implemented in the Linux Operating System with kernel version 2.6.15. The IP tables can be configured to support user datagram protocol (UDP), transmission control protocol (TCP) and Internet control message protocol (ICMP) by the DVBRCS network. These IP tables can also be configured to support multicast UDP protocol. In addition, the method can be authenticated using the SIT protocol stack for user traffic with the DVB-RCS hub as shown in FIG. 2. The method currently shows the IP packet processing for the IP packets exchanging between the DVB-RCS hub and one SIT with both return and forward links A and B. This method can also be extended to exchange the IP packets between two different SITs. In the proposed method, it is assumed that the SIT is operating in MPEG option mode, which uses IP-MPE as per the ETSIJEN 301790 standard. Similarly, the SIT c,'m also be operated in an Asynchronous Transfer Mode (ATM) option, \ hich uses ATM Adaptation Layer 5 (AAL5) as per the ETSI/EN 301790 standard. Referring to FIG. 3, a basic setup used to demonstrate an IP Packet Processing Module is illustrated in accordance with an exemplary embodiment of the present invention. The IP Packet Processing Module consists of two gateways G connected back to back with two servers B and C representing the DVB-RCS hub H and SIT S, respectively. The DVB-RCS hub H and SIT S can exhibit its own local area network (LAN) with respective IP network addresses. Each server B and C can be provided with Ethernet cards to act as gateways G. These gateways G can be physically connected through Ethemet device (eth0) E0 on back to back instead of using air imerface as the medium. Furthermore, the IP Packet Processing Module can utilize three different IP networks, which is most commonly seen in any DVB-RCS network, where the three diftbrent IP networks are the local LAN on Ethernet device (ethl) El of the server B and the server C and the back-to-back connected Ethernet device eth0 E0 of both the servers B and C, respectively. In the actual DVB. RCS network, the third IP network is the actual air interface of the network between the DVB-RCS hub H and the SITs S. In this method, the Etharnet link can be utilized instead of the satellite link. Desktop terminals A and D can be attached and/or connected to the DVB-RCS hub H and the SIT S, respectively. The IP packet processing software can reside on the servers B and C, and utilize the IP-MPE for encapsulation and de-capsulation of the IP packets. In the case of AAL5 support, the IP encapsulation can be implemented into the AAL5 at the server C and the IP de-capsulation can be implemented from the AAL5 at the server B. The desktop terminals A and D are set with default gateway address corresponding to the IP addresses binding to the Ethemet devices E1 of the servers B and C, respectively. The default gateway of the servers B and C are set with the IP addresses corresponding to the Ethel'net devices E0 of the desktop terminals C and B, respectively. For example, the below-mentioned table shows the ]P addressing scheme along with the default gateways. Terminal! Ethernet Interface]IP Address Denuh Gateway A i EO! 192.170.1.102/24 192.170.1.101 B E1 i 192.!70.1.101/24 172.16.2.2 E0 172.16.2.1/24 I C E0 1172.16.2.2/24 1172.16.2.1 El I 192"!70"2"101/24 J Io E0 i 192.170 2.t02/24 J 192.170.2.I01 Moreover, an IP forwmding mechanism can be enabled in the servers B and C by setting the/proc!sys/net/ipv4/ip forward to 1. This can also be set in /etc/sysctl.conf file for serdng this parameter permanently by inserting the following command line into the file, i.e. echo 1 > /proc/sys/net/ipv4/ip forward. The 'super user' of the overall system can make all these changes. Additionally, Netfilter is a Lintel kernel framework for mangling the IP packets, and certain hooks are defined for each network IP protocol. These hooks can correspond to well-defined places in the protocol stack and allow custom packet mangling code to be inserted in form of kernel modules, as illustrated in FIGS. 1-3. Each IP packet arriving at the hooks can be delivered to the code segments that are registered on the hooks, which allows the IP packets to be altered, dropped or re-routed by the custom code segments. When the IP packets are processed, a verdict should be returned to the Netfilter. "Ihis verdict instructs Netfilter to perform some packet-related action, e.g. to drop the IP packets or to let it continue its traversaI through the protocol stack. Such Netfilter also offers the abilit3' to process the IP packets in userspace. The IP packets can be queued in kernel space and information about the IP packets can be sent to user-space over a Netlink socket by returning a special queue verdict. The IP packets remain queued until the user-space application, at the other end of the Netlink socket returns verdicts indicating the desired actions, i.e. ACCEPT or DROP, for the IP packets. These packets can also he modified in the user-space prior to re-injection back into the kernel. Finally, the Netfilter approach allows the implementation to stay independent of kernel modifications. Therefore, the IP packets corresponding to the IP network destined for the terminals A and D in the other IP network at the application layer can be retrieved using IPTABLES and libipq without modifying the kernel code. The 1PTABLES is a tool that talks to the kernel and tells i which packets to be filtered. This tool can queue the IP packets based on the rules set to the userspace. The IPTABLES supports 3 type of chains and/or queues such as INPUT, FORWARD and OUTPUT. Here, the chain 'FORWARD' supported by the IPTABLES is used. The IPTABLES are set with the commands for packet filtering of the TCP, UDP and ICMP protocols. Some of the sample IPTABLES rules for TCP/UDP,qCMP are iptables - A FORWARD -p tcp -j QUEUE, iptables -A FORWARD -p udp -j QUEUE and iptables -A FORWARD -p icmp -j QUEUE. These settings can allow the IP packets of TCP, UDP and ICMP destined to other network to be queued to the user-space. The IP packets of all the types can be received in the application layer by using IPQUEUES, known as 'libipq'. The libipq is a development library for user-space packet queuing of the IPTABLES. For each supported protocol, a kernel module called a queue handler can be registered with the Netfilter to perform mechanics of passing the IP packets to and from the user-space. Initially, the IP packets can be retrieved using the de-capsulation of IPMPE for sending the IP packets received fi-om the other side in the IP-MPE format. Then, the IP packets can be pumped into the network using the raw socket if the particular IP packets are destined for the local LAN on the HUB side H. This method can also be extended to support forwarding of the IP packets destined for the other SIT LAN's based on the destination IP address. These IP packets can be encapsulated based on the IP-MPE and forwarded to the forward link Transport Stream (TS) generation. Referring to FIG. 4, a flow chart of a method for processing IP packets at the DVB-RCS hub using a multithreaded implementation is illustrated, in accordance with an exemplary embodiment of the present invention. Such multithreading M is implemented to make the IP packet processing faster. The data between various threads is processed using the message queues. The appropriate IPTABEES and route command should be used for supporting multicast, in particular the IPTABLES can be initialized by setting up proper rules. In addition, the sockets, Pthreads and message queues can also be initialized to create a set of threads A, B and C. During multithreading implementation, in thread A, the queued packets are read and passed to the thread B through the message queues. In thread B, the IP packets sent by the thread A can be received from the message queues. Then, the IP packets are encapsulated into MPE, and the encapsulated IP packets are sent to a distant network of a distant machine D. In thread C, MPE packets can be received from other networks through the sockets. Thereafter, the received MPE packets are either sent to the distant network of the distant machine D or de-capsulated into the IP packets. Finally, the IP packets can be pumped into a local network of a local machine k using raw socket. For example, the IPTABLE rule, i.e. iptables -A INPUT -m pkrtype - - pkt-type multicast -j QUEUE, is set in server B while performing the multicast from the terminal A to the terminal D. The mulicast packets can be forwarded only when the server B receives the mulicast packets transmitted by the terminal A. in order to receive the multicast packets at the server B, the server B can join to the multicast group. At server C, no particular IPTABLE rules are required, since the transmission is one sided, i.e. nothing is sent back, but it requires the routing table entry such as route add -net 224.0.0.0 netmask 240.0.0.0 dev ethh Then, the multicast packets at the server C can be transmitted into the destination local network. This concept can be used in any network where the splitting of a connection is required at the gateways G. 1. A method for processing a plurality' of lnternet Protocol (IP) packets at a Digital Video Broadcast - Return Channel via Satellite (DVB-RCS) hub, comprising: obtaining said plurality of IP packets at an application layer; encapsulating said plurality of IP packets in said application layer based on an IP over multiprotocol encapsulation (IP-MPE) standard; forwarding said plurality of encapsulated IP packets to a forward link transport stream generator of said DVB-RCS hub; and sending said plurality of encapsulated IP packets using a user datagram protocol (UDP) to a satellite interactive terminal (SIT), and thereby processing said plurality of IP packets at said DVB-RCS hub without using a standalone router and a proprietary hardware and/or firmware. 2. The method of claim 1, further comprising: de-capsulating said plurality of encapsulated IP packets received from said SIT in a re n link; routing said plurality oflP packets based on a destination address in an IP header of said plurality of IP packets: pumping said plurality of IP packets into a local area network (LAN) using a plurality of raw sockets with said IP header, if said destination address of said plurality of IP packets is Ibr said local LAN; and encapsulating and forwardthg said plurality of IP packets to another SIT, if said destination address of said plurality of IP packets is for a LAN connected to other SIT. 3. The method of claim 1, wherein said application layer carries out a routing decision of said plurality of IP packets. 4. The method of claim 1, wherein said plurality of IP packets encapsulated and de-capsulated using IP-MPE and AAL5. 5. The method of claim l, wherein said plurality, of IP packets is processed by multi-threading using a message queue to support and sustain a high data rate of IP packet processing at said DVB-RCS hub. 6. The method of claim 1, wherein said pluraliu of IP packets is obtained at said applications layer using a plurality, of standard IP tables and a plurality of [P queues without modifying a kernel code. 7. The method of claim t, wherein said plurality of standard IP tables and said plurality of IP queues are implemented in a single PC with standard Linux Operating system. 8. The method of claim 1. wherein said plurality of standard IP tables configured to support UDP, TCP, ICMP and multicast UDP. 9. The method of claim !, wherein said SIT is operated in bnth MPEG option mode and ATM option mode 10. A system comprising a processor configured to perfomn the method as claimed in the preceding claims. Dated this 7 day of November 2008 (ANAND BARNABAS) of DePENNING & DePENNING