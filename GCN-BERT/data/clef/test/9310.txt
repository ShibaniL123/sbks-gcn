CROSS-REFERENCE TO RELATED APPLICATIONS This application claims the benefit of priority to U.S. Provisional Patent Application entitled “Systems and Methods of Incentivizing Game Play,” Ser. No. 61/980,241, filed Apr. 16, 2014, which is hereby incorporated herein by reference in its entirety. TECHNICAL FIELD The present disclosure relates to games and applications in general and in particular to computer-implemented games. In an example embodiment, a player's contacts may be dynamically selected and products may be dynamically promoted. BACKGROUND In many games, there is a virtual world or some other imagined playing space where a player/user of the game controls one or more player characters (herein “character,” “player character,” or “PC”). Player characters can be considered in-game representations of the controlling player. As used herein, the terms “player,” “user,” “entity,” and “friend” may refer to the in-game player character controlled by that player, user, entity, or friend, unless context suggests otherwise. The game display can display a representation of the player character. A game engine accepts inputs from the player, determines player character actions, decides outcomes of events and presents the player with a game display illuminating what happened. In some games, there are multiple players, wherein each player controls one or more player characters. In many computer games, there are various types of in-game assets (aka “rewards” or “loot”) that a player character can obtain within the game. For example, a player character may acquire game points, gold coins, experience points, character levels, character attributes, virtual cash, game keys, or other in-game items of value. In many computer games, there are also various types of in-game obstacles that a player must overcome to advance within the game. In-game obstacles can include tasks, puzzles, opponents, levels, gates, actions, etc. In some games, a goal of the game may be to acquire certain in-game assets, which can then be used to complete in-game tasks or to overcome certain in-game obstacles. For example, a player may be able to acquire a virtual key (i.e., the in-game asset) that can then be used to open a virtual door (i.e., the in-game obstacle). An electronic social networking system typically operates with one or more social networking servers providing interaction between users such that a user can specify other users of the social networking system as “friends.” A collection of users and the “friend” connections between users can form a social graph that can be traversed to find second, third and more remote connections between users, much like a graph of nodes connected by edges can be traversed. Many online computer games are operated on an online social networking system. Such an online social networking system allows both users and other parties to interact with the computer games directly, whether to play the games or to retrieve game- or user-related information. Internet users may maintain one or more accounts with various service providers, including, for example, online game networking systems and online social networking systems. Online systems can typically be accessed using browser clients (e.g., Firefox, Chrome, Internet Explorer). BRIEF DESCRIPTION OF THE DRAWINGS The present disclosure is illustrated by way of example, and not limitation, in the figures of the accompanying drawings, in which like reference numerals indicate similar elements unless otherwise indicated. In the drawings, FIG. 1 is a schematic diagram showing an example of a system, according to some example embodiments. FIG. 2 is a schematic diagram showing an example of a social network within a social graph, according to some embodiments. FIG. 3 is a block diagram illustrating components of a computing device, according to some example embodiments. FIG. 4 is a block diagram illustrating selection from a list of filtered users one or more social network users who will receive a notification related to an online game, according to some example embodiments. FIG. 5 is a block diagram showing an example of mobile computing device screen displays for accessing a notification and installing an online game, according to some example embodiments. FIG. 6 is a flowchart showing an example method of crediting a player of an online game with an in-game reward based on the social network user performing an online game action, according to some example embodiments. FIG. 7 is a diagrammatic representation of an example data flow between example components of the example system of FIG. 1, according to some example embodiments. FIG. 8 illustrates an example computing system architecture, which may be used to implement a server or a client system illustrated in FIG. 9, according to some example embodiments. FIG. 9 illustrates an example network environment, in which various example embodiments may operate. DETAILED DESCRIPTION A system, a machine-readable storage medium storing instructions, and a computer-implemented method are described herein to provide rewards to a player of an online game(s). In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of example embodiments. It will be evident, however, to one skilled in the art that the present technology may be practiced without these specific details. In various embodiments, an Install Reward Engine (hereinafter “I.R. Engine”) incentivizes a player of an online game to invite users of a social network who are the player's social network connections to install or access the online game (or a different online game). The I.R. Engine receives a selection of at least one social network user by a player of an online game. The I.R. Engine sends to a social network account of a selected social network user a notification to perform an online game action (such as an action that corresponds to a type of access of the online game). The I.R. Engine credits (or provides, rewards, offers) the player with an in-game reward based on the selected social network user performing the online game action. The I.R. Engine thereby provides rewards to a player of an online game when the player takes actions that persuade other users to install the online game—or access the online game if they have already previously installed the online game but have not accessed the online game for a predetermined amount of time. In order to identify which users should receive a notification (or invitation) from the player, the I.R. Engine filters a player's connections with various users of a social network to create a list of filtered users. The I.R. Engine sends the list of filtered users for display on a client device associated with the player in order to prompt the player to select one or more users from the list of filtered users. The I.R. Engines filters the player's connections with users of the social network to determine the most relevant social network users to whom to send a notification to access or install the online game(s). Filtering can be based, for example, at least on one of: a degree of connection between the player and a user (i.e. 1st degree Friend, 2nd degree Friend, etc.), on social network interaction between the player and the user (i.e. amount and/or frequency of messages and/or posts, amount and/or frequency of tags concerning the player and the user), similarity between social network profiles of the player and the user, any type online game activity by the player, any type of online game activity by the user, any type of online game interactions between the player and the user. In various embodiments, the I.R. Engine determines whether a social network user connected to the player has not already installed the online game and includes the social network user in the list of filtered users based on the social network user having not already installed the online game such that social network users who have already previously installed the online are not included in the list of filtered users. In other embodiments, the I.R. Engine does not review whether a social network user has already installed the online game during generation of the list of filtered users. It is also understood that the I.R. Engine can apply a policy received from the social network with regard to identifying users for the list of filtered users. As an example, the I.R. Engine can select a predefined number of users for the list of filtered users—where the predefined number of users is based on a policy of the social network. As the player selects one or more social network users from the list of filtered users, the I.R. Engine updates the list of filtered users with additional social network users in order to meet the predefined number of users. It is understood that the policy can be any social network attribute(s) that, when enforced by the I.R. Engine, determines that some users can be included in the list of filtered users while other users cannot. The I.R. Engine receives a selection by the player of at least one filtered user (“selected user”). Based on the player's selection, the I.R. Engine triggers a notification to be sent to the selected user's account on the social network. If the selected user has already installed the online game on a client device associated with the selected user, acceptance of the notification by the selected user in the social network initiates access of the online game by the client device associated with the selected user. The I.R. Engine detects such access of the online game by the selected user and provides an in-game reward (i.e. online currency, resources, points, skills, energy level, virtual objects, added advancement through the online game) in the online game to the player (and/or the selected user) based on the detected access. If the selected user has not previously installed the online game on the client device associated with the selected user, acceptance of the notification by the selected user in the social network initiates access of an online game installation webpage by the client device associated with the selected user. The I.R. Engine detects installation by the selected user of the online game on the client device associated with the selected user and provides an in-game reward in the online game to the player (and/or the selected user) based on the detected installation. It is understood that, in some embodiments, the notification sent to the selected user may be for the same online game played by the player or a different online game. In another embodiment, the player plays an online game that is inaccessible via a mobile computing device. Stated differently, the online game is not supported by a mobile computer platform such that it cannot be played on a mobile computing device. The I.R. Engine generates the list of filtered users from which the player can select users who will receive a notification to play or install the online game. The I.R. Engine detects the player selecting at least one user from the list of filtered user and the I.R. Engine sends the notification to the selected user's account on the social network. Since the online game is not available via a mobile computing platform, the I.R. Engine associates the notification with a substitute online game for when the selected user accesses the notification via the mobile computing device. The substitute online game is an online game that is accessible from a mobile computing device. The I. R. Engine detects the selected user accessing the notification from a mobile computing device. Selection of the notification from the mobile computing device triggers display of one of an installation webpage or a game play starting webpage for the substitute online game—since the online game does not have a corresponding mobile version. However, if the I. R. Engine detects the selected user accessing the notification from a non-mobile computing device, then such selection triggers display of one of an installation webpage or a game play starting webpage for the online game—not the substitute online game. The I.R. Engine provides the player with an in-game reward based on the selected user's installation of the online game (or substitute game) and/or based on the selected user initiating a game session of the online game (or substitute game) if the selected user had already previously installed the respective game. It is understood that the in-reward can be a virtual currency for the online game. It is also understood that both the player and the selected user can receive an in-game reward. In some embodiments, an in-game reward can be applied to one or more online game of the player's choosing. It is understood that various embodiments include the generation of modules to cause any component(s) of a social networking system, game networking system (i.e. online gaming system) and/or a client system to perform any and all of the actions, operations and steps described herein. It is further understood that, in various embodiments, any of the one or more modules may comprise source code that, when compiled by a computing device(s), creates object code that causes the computing device(s) to perform the various actions, operations and steps described herein. It is understood that embodiments described herein are not limited to being implemented with online games, but rather, can be implemented for any kind of online environment. It is further understood that, in some embodiments, the social network is external a game networking system of the online game. It is further understood that embodiments described herein include the generation of graphical display data based on a result of any and all of the actions, operations and steps described herein. Social Network Systems and Game Networking Systems FIG. 1 illustrates an example of a system for implementing various disclosed embodiments. In particular embodiments, system 100 comprises player 101, social networking system 120a, game networking system 120b (i.e. online gaming system), client system 130, and network 160. The components of system 100 can be connected to each other in any suitable configuration, using any suitable type of connection. The components may be connected directly or over a network 160, which may be any suitable network. For example, one or more portions of network 160 may be an ad hoc network, an intranet, an extranet, a virtual private network (VPN), a local area network (LAN), a wireless LAN (WLAN), a wide area network (WAN), a wireless WAN (WWAN), a metropolitan area network (MAN), a portion of the Internet, a portion of the Public Switched Telephone Network (PSTN), a cellular telephone network, another type of network, or a combination of two or more such networks. Social networking system 120a (i.e. social network system) is a network-addressable computing system that can host one or more social graphs. Social networking system 120a can generate, store, receive, and transmit social networking data. Social networking system 120a can be accessed by the other components of system 100 either directly or via network 160. Game networking system 120b is a network-addressable computing system that can host one or more online games. Game networking system 120b can generate, store, receive, and transmit game-related data, such as, for example, game account data, game input, game state data, and game displays. Game networking system 120b can be accessed by the other components of system 100 either directly or via network 160. Player 101 uses client system 130 to access, send data to, and receive data from social networking system 120a and game networking system 120b. Client system 130 can access social networking system 120a or game networking system 120b directly, via network 160, or via a third-party system. As an example and not by way of limitation, client system 130 accesses game networking system 120b via social networking system 120a. Client system 130 can be any suitable computing device, such as a personal computer, laptop, cellular phone, smart phone, computing tablet, etc. Although FIG. 1 illustrates a particular number of players 101, social network systems 120a, game networking systems 120b, client systems 130, and networks 160, this disclosure contemplates any suitable number of players 101, social network systems 120a, game networking systems 120b, client systems 130, and networks 160. As an example and not by way of limitation, system 100 includes one or more game networking systems 120b and no social networking systems 120a. As another example and not by way of limitation, system 100 includes a system that comprises both social networking system 120a and game networking system 120b. Moreover, although FIG. 1 illustrates a particular arrangement of player 101, social networking system 120a, game networking system 120b, client system 130, and network 160, this disclosure contemplates any suitable arrangement of player 101, social networking system 120a, game networking system 120b, client system 130, and network 160. The components of system 100 are connected to each other using any suitable connections 110. For example, suitable connections 110 include wireline (such as, for example, Digital Subscriber Line (DSL) or Data Over Cable Service Interface Specification (DOCSIS)), wireless (such as, for example, Wi-Fi or Worldwide Interoperability for Microwave Access (WiMAX)) or optical (such as, for example, Synchronous Optical Network (SONET) or Synchronous Digital Hierarchy (SDH)) connections. In particular embodiments, one or more connections 110 each include an ad hoc network, an intranet, an extranet, a VPN, a LAN, a WLAN, a WAN, a WWAN, a MAN, a portion of the Internet, a portion of the PSTN, a cellular telephone network, or another type of connection, or a combination of two or more such connections. Connections 110 need not necessarily be the same throughout system 100. One or more first connections 110 may differ in one or more respects from one or more second connections 110. Although FIG. 1 illustrates particular connections between player 101, social networking system 120a, game networking system 120b, client system 130, and network 160, this disclosure contemplates any suitable connections between player 101, social networking system 120a, game networking system 120b, client system 130, and network 160. As an example and not by way of limitation, in particular embodiments, client system 130 may have a direct connection to social networking system 120a or game networking system 120b, bypassing network 160. Online Games and Game Systems In an online computer game, a game engine manages the game state of the game. Game state comprises all game play parameters, including player character state, non-player character (NPC) state, in-game object state, game world state (e.g., internal game clocks, game environment), and other game play parameters. Each player 101 controls one or more player characters (PCs). The game engine controls all other aspects of the game, including non-player characters (NPCs), and in-game objects. The game engine also manages game state, including player character state for currently active (online) and inactive (offline) players. An online game can be hosted by game networking system 120b (i.e. online gaming system), which includes a Notification Generator 150 that performs operations according to embodiments as described herein. The game networking system 120b can be accessed using any suitable connection with a suitable client system 130. A player has a game account on game networking system 120b, wherein the game account can contain a variety of information associated with the player (e.g., the player's personal information, financial information, purchase history, player character state, game state). In some embodiments, a player plays multiple games on game networking system 120b, which maintains a single game account for the player with respect to all the games, or multiple individual game accounts for each game with respect to the player. In some embodiments, game networking system 120b can assign a unique identifier to each player 101 of an online game hosted on game networking system 120b. Game networking system 120b can determine that a player 101 is accessing the online game by reading the user's cookies, which may be appended to HTTP requests transmitted by client system 130, and/or by the player 101 logging onto the online game. In particular embodiments, player 101 accesses an online game and control the game's progress via client system 130 (e.g., by inputting commands to the game at the client device). Client system 130 can display the game interface, receive inputs from player 101, transmitting user inputs or other events to the game engine, and receive instructions from the game engine. The game engine can be executed on any suitable system (such as, for example, client system 130, social networking system 120a, or game networking system 120b). As an example and not by way of limitation, client system 130 can download client components of an online game, which are executed locally, while a remote game server, such as game networking system 120b, provides backend support for the client components and may be responsible for maintaining application data of the game, processing the inputs from the player, updating and/or synchronizing the game state based on the game logic and each input from the player, and transmitting instructions to client system 130. As another example and not by way of limitation, each time player 101 provides an input to the game through the client system 130 (such as, for example, by typing on the keyboard or clicking the mouse of client system 130), the client components of the game transmit the player's input to game networking system 120b. Storing Game-Related Data A database stores any data relating to game play within a game networking system 120b. The database includes database tables for storing a player game state that includes information about the player's virtual gameboard, the player's character, or other game-related information. For example, player game state includes virtual objects owned or used by the player, placement positions for virtual structural objects in the player's virtual gameboard, and the like. Player game state also includes in-game obstacles of tasks for the player (e.g., new obstacles, current obstacles, completed obstacles, etc.), the player's character attributes (e.g., character health, character energy, amount of coins, amount of cash or virtual currency, etc.), and the like. The database also includes database tables for storing a player profile that includes user-provided player information that is gathered from the player, the player's client device, or an affiliate social network. The user-provided player information includes the player's demographic information, the player's location information (e.g., a historical record of the player's location during game play as determined via a GPS-enabled device or the internet protocol (IP) address for the player's client device), the player's localization information (e.g., a list of languages chosen by the player), the types of games played by the player, and the like. In some example embodiments, the player profile also includes derived player information determined from other information stored in the database. The derived player information includes information that indicates the player's level of engagement with the virtual game, the player's friend preferences, the player's reputation, the player's pattern of game-play, and the like. For example, the game networking system 120b determines the player's friend preferences based on player attributes that the player's first-degree friends have in common, and stores these player attributes as friend preferences in the player profile. Furthermore, the game networking system 120b determines reputation-related information for the player based on user-generated content (UGC) from the player or the player's Nth degree friends (e.g., in-game messages or social network messages), and stores this reputation-related information in the player profile. The derived player information also includes information that indicates the player's character temperament during game play, anthropological measures for the player (e.g., tendency to like violent games), and the like. In some example embodiments, the player's level of engagement is indicated from the player's performance within the virtual game. For example, the player's level of engagement is determined based on one or more of the following: a play frequency for the virtual game or for a collection of virtual games; an interaction frequency with other players of the virtual game; a response time for responding to in-game actions from other players of the virtual game; and the like. In some example embodiments, the player's level of engagement includes a likelihood value indicating a likelihood that the player performs a desired action. For example, the player's level of engagement indicates a likelihood that the player chooses a particular environment, or completes a new challenge within a determinable period of time from when it is first presented to him. In some example embodiments, the player's level of engagement includes a likelihood that the player is a leading player of the virtual game (a likelihood to lead). The game networking system 120b determines the player's likelihood to lead value based on information from other players that interact with this player. For example, the game networking system 120b determines the player's likelihood to lead value by measuring the other players' satisfaction in the virtual game, measuring their satisfaction from their interaction with the player, measuring the game-play frequency for the other players in relation to their interaction frequency with the player (e.g., the ability for the player to retain others), and/or the like. The game networking system 120b also determines the player's likelihood to lead value based on information about the player's interactions with others and the outcome of these interactions. For example, the game networking system 120b determines the player's likelihood to lead value by measuring the player's amount of interaction with other players (e.g., as measured by a number of challenges that the player cooperates with others, and/or an elapsed time duration related thereto), the player's amount of communication with other players, the tone of the communication sent or received by the player, and/or the like. Moreover, the game networking system 120b determines the player's likelihood to lead value based on determining a likelihood for the other players to perform a certain action in response to interacting or communicating with the player and/or the player's virtual environment. Game Systems, Social Networks, and Social Graphs: In an online multiplayer game, players control player characters (PCs), a game engine controls non-player characters (NPCs) and game features, and the game engine also manages player character state and game state and tracks the state for currently active (i.e., online) players and currently inactive (i.e., offline) players. A player character can have a set of attributes and a set of friends associated with the player character. As used herein, the term “player character state” can refer to any in-game characteristic of a player character, such as location, assets, levels, condition, health, status, inventory, skill set, name, orientation, affiliation, specialty, and so on. Player characters are displayed as graphical avatars within a user interface of the game. In other implementations, no avatar or other graphical representation of the player character is displayed. Game state encompasses the notion of player character state and refers to any parameter value that characterizes the state of an in-game element, such as a non-player character, a virtual object (such as a wall or castle), etc. The game engine uses player character state to determine the outcome of game events, sometimes also considering set or random variables. Generally, a player character's probability of having a more favorable outcome is greater when the player character has a better state. For example, a healthier player character is less likely to die in a particular encounter relative to a weaker player character or non-player character. In some embodiments, the game engine can assign a unique client identifier to each player. In particular embodiments, player 101 accesses particular game instances of an online game. A game instance is copy of a specific game play area that is created during runtime. In particular embodiments, a game instance is a discrete game play area where one or more players 101 can interact in synchronous or asynchronous play. A game instance may be, for example, a level, zone, area, region, location, virtual space, or other suitable play area. A game instance may be populated by one or more in-game objects. Each object is defined within the game instance by one or more variables, such as, for example, position, height, width, depth, direction, time, duration, speed, color, and other suitable variables. A game instance may be exclusive (i.e., accessible by specific players) or non-exclusive (i.e., accessible by any player). In particular embodiments, a game instance is populated by one or more player characters controlled by one or more players 101 and one or more in-game objects controlled by the game engine. When accessing an online game, the game engine allows player 101 to select a particular game instance to play from a plurality of game instances. Alternatively, the game engine automatically selects the game instance that player 101 will access. In particular embodiments, an online game comprises only one game instance that all players 101 of the online game can access. In particular embodiments, a specific game instance is associated with one or more specific players. A game instance is associated with a specific player when one or more game parameters of the game instance are associated with the specific player. As an example and not by way of limitation, a game instance associated with a first player is named “First Player's Play Area.” This game instance is populated with the first player's PC and one or more in-game objects associated with the first player. In particular embodiments, a game instance associated with a specific player is only accessible by that specific player. As an example and not by way of limitation, a first player accesses a first game instance when playing an online game, and this first game instance is inaccessible to all other players. In other embodiments, a game instance associated with a specific player is accessible by one or more other players, either synchronously or asynchronously with the specific player's game play. As an example and not by way of limitation, a first player is associated with a first game instance, but the first game instance can be accessed by all first-degree friends in the first player's social network. In particular embodiments, the game engine creates a specific game instance for a specific player when that player accesses the game. As an example and not by way of limitation, the game engine creates a first game instance when a first player initially accesses an online game, and that same game instance is loaded each time the first player accesses the game. As another example and not by way of limitation, the game engine creates a new game is created randomly or selected from a set of predetermined game instances. In particular embodiments, the set of in-game actions available to a specific player is different in a game instance that is associated with that player compared to a game instance that is not associated with that player. The set of in-game actions available to a specific player in a game instance associated with that player is a subset, superset, or independent of the set of in-game actions available to that player in a game instance that is not associated with him. As an example and not by way of limitation, a first player is associated with Blackacre Farm in an online farming game. The first player is able to plant crops on Blackacre Farm. If the first player accesses game instance associated with another player, such as Whiteacre Farm, the game engine does not allow the first player to plant crops in that game instance. However, other in-game actions are available to the first player, such as watering or fertilizing crops on Whiteacre Farm. In particular embodiments, a game engine can interface with a social graph. Social graphs are models of connections between entities (e.g., individuals, users, contacts, friends, players, player characters, non-player characters, businesses, groups, associations, concepts, etc.). These entities are considered “users” of the social graph; as such, the terms “entity” and “user” may be used interchangeably when referring to social graphs herein. A social graph can have a node for each entity and edges to represent relationships between entities. A node in a social graph can represent any entity. In particular embodiments, a unique client identifier can be assigned to each user in the social graph. This disclosure assumes that at least one entity of a social graph is a player or player character in an online multiplayer game, though this disclosure any suitable social graph users. The minimum number of edges required to connect a player (or player character) to another user is considered the degree of separation between them. For example, where the player and the user are directly connected (one edge), they are deemed to be separated by one degree of separation. The user would be a so-called “first-degree friend” of the player. Where the player and the user are connected through one other user (two edges), they are deemed to be separated by two degrees of separation. This user would be a so-called “second-degree friend” of the player. Where the player and the user are connected through N edges (or N−1 other users), they are deemed to be separated by N degrees of separation. This user would be a so-called “Nth-degree friend.” As used herein, the term “friend” means only first-degree friends, unless context suggests otherwise. Within the social graph, each player (or player character) has a social network. A player's social network includes all users in the social graph within Nmax degrees of the player, where Nmax is the maximum degree of separation allowed by the system managing the social graph (such as, for example, social networking system 120a or game networking system 120b). In one embodiment, Nmax equals 1, such that the player's social network includes only first-degree friends. In another embodiment, Nmax is unlimited and the player's social network is coextensive with the social graph. In particular embodiments, the social graph is managed by game networking system 120b, which is managed by the game operator. In other embodiments, the social graph is part of a social networking system 120a managed by a third-party (e.g., Facebook, Friendster, Myspace). In yet other embodiments, player 101 has a social network on both game networking system 120b and social networking system 120a, wherein player 101 can have a social network on the game networking system 120b that is a subset, superset, or independent of the player's social network on social networking system 120a. In such combined systems, game network system 120b can maintain social graph information with edge type attributes that indicate whether a given friend is an “in-game friend,” an “out-of-game friend,” or both. The various embodiments disclosed herein are operable when the social graph is managed by social networking system 120a, game networking system 120b, or both. FIG. 2 shows an example of a social network within a social graph. As shown, Player 201 can be associated, connected or linked to various other users, or “friends,” within the social network 250. These associations, connections or links can track relationships between users within the social network 250 and are commonly referred to as online “friends” or “friendships” between users. Each friend or friendship in a particular user's social network within a social graph is commonly referred to as a “node.” For purposes of illustration and not by way of limitation, the details of social network 250 will be described in relation to Player 201. As used herein, the terms “player,” “user” and “account” can be used interchangeably and can refer to any user or character in an online game networking system or social networking system. As used herein, the term “friend” can mean any node within a player's social network. As shown in FIG. 2, Player 201 has direct connections with several friends. When Player 201 has a direct connection with another individual, that connection is referred to as a first-degree friend. In social network 250, Player 201 has two first-degree friends. That is, Player 201 is directly connected to Friend 11 211 and Friend 21 221. In a social graph, it is possible for individuals to be connected to other individuals through their first-degree friends (i.e., friends of friends). As described above, each edge required to connect a player to another user is considered the degree of separation. For example, FIG. 2 shows that Player 201 has three second-degree friends to which he is connected via his connection to his first-degree friends. Second-degree Friend 12 212 and Friend 22 222 are connected to Player 201 via his first-degree Friend 11 211. The limit on the depth of friend connections, or the number of degrees of separation for associations, that Player 201 is allowed is typically dictated by the restrictions and policies implemented by social networking system 120a. In various embodiments, Player 201 can have Nth-degree friends connected to him through a chain of intermediary degree friends as indicated in FIG. 2. For example, Nth-degree Friend 1N 219 is connected to Player 201 via second-degree Friend 32 232 and one or more other higher-degree friends. Various embodiments may take advantage of and utilize the distinction between the various degrees of friendship relative to Player 201. In particular embodiments, a player (or player character) can have a social graph within an online multiplayer game that is maintained by the game engine and another social graph maintained by a separate social networking system. FIG. 2 depicts an example of in-game social network 260 and out-of-game social network 250. In this example, Player 201 has out-of-game connections 255 to a plurality of friends, forming out-of-game social network 250. Here, Friend 11 211 and Friend 21 221 are first-degree friends with Player 201 in his out-of-game social network 250. Player 201 also has in-game connections 265 to a plurality of players, forming in-game social network 260. Here, Friend 21 221, Friend 31 231, and Friend 41 241 are first-degree friends with Player 201 in his in-game social network 260. In some embodiments, it is possible for a friend to be in both the out-of-game social network 250 and the in-game social network 260. Here, Friend 21 221 has both an out-of-game connection 255 and an in-game connection 265 with Player 201, such that Friend 21 221 is in both Player 201's in-game social network 260 and Player 201's out-of-game social network 250. As with other social networks, Player 201 can have second-degree and higher-degree friends in both his in-game and out of game social networks. In some embodiments, it is possible for Player 201 to have a friend connected to him both in his in-game and out-of-game social networks, wherein the friend is at different degrees of separation in each network. For example, if Friend 22 222 had a direct in-game connection with Player 201, Friend 22 222 would be a second-degree friend in Player 201's out-of-game social network, but a first-degree friend in Player 201's in-game social network. In particular embodiments, a game engine can access in-game social network 260, out-of-game social network 250, or both. In particular embodiments, the connections in a player's in-game social network can be formed both explicitly (e.g., users must “friend” each other) and implicitly (e.g., system observes user behaviors and “friends” users to each other). Unless otherwise indicated, reference to a friend connection between two or more players can be interpreted to cover both explicit and implicit connections, using one or more social graphs and other factors to infer friend connections. The friend connections can be unidirectional or bidirectional. It is also not a limitation of this description that two players who are deemed “friends” for the purposes of this disclosure are not friends in real life (i.e., in disintermediated interactions or the like), but that could be the case. FIG. 3 is a block diagram illustrating components of a computing device, according to some example embodiments. The computing device 304 executes all or some modules of the I.R. Engine. The computing device 304 can be a client device or a server computing device. The computing device 304 includes a filter module 310, a transmission module 320, a policy module 330, a detection module 340, a reward module 350 and a display module 360. In various example embodiments, the policy module 310 is a hardware-implemented module configured to control, manage and store information related to identifying include one or more social network users having a social network connection with a social network account of a player of online game into a filtered list of users. In various example embodiments, the transmission module 320 is a hardware-implemented module configured to control, manage and store information related to the filtered list, receiving selections of users (“selected users”) from the filtered list, triggering creation of a notification (regarding any online game) for each selected user, sending notifications to each selected user and receiving a selection of the notification by respective selected users. In various example embodiments, the policy module 330 is a hardware-implemented module configured to control, manage and store information related to receiving a policy from the social network and information related to creating and updating the filtered list of users in accordance with the policy. In various example embodiments, the detection module 340 is a hardware-implemented module configured to control, manage and store information related to detecting whether an online game has already been installed on a client device and information related to detecting whether a mobile version of an online game is available or is not available via a mobile computing platform. In various example embodiments, the reward module 350 is a hardware-implemented module configured to control, manage and store information related to providing an in-game reward to the player of the online game(s) and/or the selected user who installs the online game(s) or initiates a game session of a previously installed online game(s). In various example embodiments, the display module 360 is a hardware-implemented module configured to control, manage and store information related to displaying graphical user interfaces regarding, for example, the list of filtered users, displaying a notification and display of a received in-game reward. FIG. 4 is a block diagram illustrating selection from a list of filtered users one or more social network users who will receive a notification related to an online game, according to some example embodiments. FIG. 5 is a block diagram showing an example of mobile computing device screen displays for accessing a notification and installing an online game, according to some example embodiments. FIG. 6 is a flowchart 600 showing an example method of crediting a player of an online game with an in-game reward based on the social network user performing an online game action, according to some example embodiments. The operations of flowchart 600 of FIG. 6 will be described below with respect to the block diagrams of FIGS. 4-5. At step 610, the I.R. Engine receives a selection by a player from a list of filtered user. Each user in the list of filtered users is a respective social network user having a social network connection with a social network account of the player. Illustrated in FIG. 4, a display 402 shows a first portion 404 of social network users selected by the player from a list of filtered users and a display 406 shows a second portion 408 of social network users selected by the player from the list of filtered users. Upon receiving a selection of the send button 410, a notification is sent to each of the selected social network users listed in the first and second portions 404, 408. The list of filtered user is generated by the I.R. Engine and sent to the social network for display to the player via the social network account of the player. To generate the list of filtered users, the I.R. Engines sorts through the social network connections of the social network account of the player. The I.R. Engine applies one or more criteria to determine which social network user(s) is included in the list of filtered users. In one embodiment, social network users who have previously played a different online game with the player are included in the list of filtered users. In another embodiment, social network users who have not previously installed the online game are included in the list of filtered users. In yet another embodiment, social network users who have previously responded to at least one game-related notification from the player (such as notifications related to other online games) are included in the list of filtered users. When the player selects a social network user from the list of filtered users, the I.R. Engine flags the selected social network user so the social network user will not be included in subsequent notifications for the online game. In various embodiments, the I.R. Engine receives a policy from the social network and applies the policy during creation of the list of filtered users and during update of the list of filtered users. For example, the policy may limit a total number of social network users to be included in the list of filtered users. As the player selects the social network users from the list of filtered users, the I.R. Engine updates the list of filtered users with additional social network user to assure the list of filtered users is continually populated with the total number of users dictated by the policy. It is understood that the policy received from the social network is not limited to a total number of social network users to be included in the list of filtered users. The policy can correspond to any social network attribute of a social network user (e.g. type(s) of online gaming activity of the social network user, type(s) of social network activity of the social network user, a geographic attribute(s), etc.). At step 620, the I.R. Engine sends to a social network account of a selected social network user (hereinafter “selected user”) a notification to perform an online game action. As shown in FIG. 5, a first display 502, a second display 504 and a third display 506 related to a social network account of the selected user who has received a notification in the social network from the player. In some embodiments, the displays 502, 504, 506 are for display on a mobile computing device. However it is understood that similar displays can be accessed on any kind of computing device. A selected user selects a notifications indicator 508 in the first display 502. Based on the selection of the notifications indicator 508, the second display is generated in order to display the notification 510 sent by the player. Based on selection of the notification 510, the mobile computing device displays the third display 506, which is an installation page for the online game. The selected user can select the installation button 512 in order to initiate installation of the online game on the mobile computing device. It is understood that if the selected user has already previously installed the online game, the third display 506 will not be shown in response to selection of the notification 510. Rather, a start page for the already installed online game is presented so that the social network can initiate a game session of the online game. At step 630, the I.R. Engine credits the player with an in-game reward based on the selected user performing the online game action. In various embodiments, the I.R. Engine also credits the selected user with an in-game reward for installing or initiating a game session of the online game. In some embodiments, the in-game reward can by applied to a different game than the online game based on the recipient of the in-game reward selecting in which game the in-game reward is to be applied. Data Flow FIG. 7 illustrates an example data flow between the components of system 700. In particular embodiments, system 700 can include client system 730, social networking system 120a (i.e. social network system), and game networking system 120b (i.e. online game system). The components of system 700 can be connected to each other in any suitable configuration, using any suitable type of connection. The components are connected directly or over any suitable network. Client system 730, social networking system 120a, and game networking system 120bb can each have one or more corresponding data stores such as local data store 735, social data store 745, and game data store 765, respectively. Social networking system 120a and game networking system 120b can also have one or more servers that can communicate with client system 730 over an appropriate network. Social networking system 120a and game networking system 120b can have, for example, one or more internet servers for communicating with client system 730 via the Internet. Similarly, social networking system 120a and game networking system 120b can have one or more mobile servers for communicating with client system 730 via a mobile network (e.g., GSM, PCS, Wi-Fi, WPAN, etc.). In some embodiments, one server communicates with client system 730 over both the Internet and a mobile network. In other embodiments, separate servers can be used. Client system 730 can receive and transmit data 723 to and from game networking system 120b. This data can include, for example, webpages, messages, game inputs, game displays, HTTP packets, data requests, transaction information, updates, and other suitable data. At some other time, or at the same time, game networking system 120b can communicate data 743, 747 (e.g., game state information, game system account information, page info, messages, data requests, updates, etc.) with other networking systems, such as social networking system 120a (e.g., Facebook, Myspace, etc.). Client system 730 can also receive and transmit data 727 to and from social networking system 120a. This data can include, for example, webpages, messages, social graph information, social network displays, HTTP packets, data requests, transaction information, updates, and other suitable data. Communication between client system 730, social networking system 120a, and game networking system 120b can occur over any appropriate electronic communication medium or network using any suitable communications protocols. For example, client system 730, as well as various servers of the systems described herein, includes Transport Control Protocol/Internet Protocol (TCP/IP) networking stacks to provide for datagram and transport functions. Of course, any other suitable network and transport layer protocols can be utilized. In addition, hosts or end-systems described herein may use a variety of higher layer communications protocols, including client-server (or request-response) protocols, such as the HyperText Transfer Protocol (HTTP) and other communications protocols, such as HTTPS, FTP, SNMP, TELNET, and a number of other protocols, may be used. In some embodiments, no protocol may be used and, instead, transfer of raw data may be utilized via TCP or User Datagram Protocol. In addition, a server in one interaction context may be a client in another interaction context. In particular embodiments, the information transmitted between hosts may be formatted as HyperText Markup Language (HTML) documents. Other structured document languages or formats can be used, such as XML, and the like. Executable code objects, such as JavaScript and ActionScript, can also be embedded in the structured documents. In some client-server protocols, such as the use of HTML over HTTP, a server generally transmits a response to a request from a client. The response comprises one or more data objects. For example, the response comprises a first data object, followed by subsequently transmitted data objects. In particular embodiments, a client request causes a server to respond with a first data object, such as an HTML page, which itself refers to other data objects. A client application, such as a browser, will request these additional data objects as it parses or otherwise processes the first data object. In particular embodiments, an instance of an online game can be stored as a set of game state parameters that characterize the state of various in-game objects, such as, for example, player character state parameters, non-player character parameters, and virtual item parameters. In particular embodiments, game state is maintained in a database as a serialized, unstructured string of text data as a so-called Binary Large Object (BLOB). When a player accesses an online game on game networking system 120b, the BLOB containing the game state for the instance corresponding to the player can be transmitted to client system 730 for use by a client-side executed object to process. In particular embodiments, the client-side executable is a FLASH-based game, which can de-serialize the game state data in the BLOB. As a player plays the game, the game logic implemented at client system 730 maintains and modifies the various game state parameters locally. The client-side game logic is also batch game events, such as mouse clicks, and transmit these events to game networking system 120b. Game networking system 120b itself operates by retrieving a copy of the BLOB from a database or an intermediate memory cache (memcache) layer. Game networking system 120b can also de-serialize the BLOB to resolve the game state parameters and execute its own game logic based on the events in the batch file of events transmitted by the client to synchronize the game state on the server side. Game networking system 120b then re-serializes the game state, now modified, into a BLOB and pass this to a memory cache layer for lazy updates to a persistent database. With a client-server environment in which the online games runs, one server system, such as game networking system 120b, supports multiple client systems 730. At any given time, there may be multiple players at multiple client systems 730 all playing the same online game. In practice, the number of players playing the same game at the same time may be very large. As the game progresses with each player, multiple players provide different inputs to the online game at their respective client systems 730, and multiple client systems 730 transmit multiple player inputs and/or game events to game networking system 120b for further processing. In addition, multiple client systems 730 transmit other types of application data to game networking system 120b. In particular embodiments, a computed-implemented game is a text-based or turn-based game implemented as a series of web pages that are generated after a player selects one or more actions to perform. The web pages are displayed in a browser client executed on client system 730. As an example and not by way of limitation, a client application downloaded to client system 730 operates to serve a set of webpages to a player. As another example and not by way of limitation, a computer-implemented game may be an animated or rendered game executable as a stand-alone application or within the context of a webpage or other structured document. In particular embodiments, the computer-implemented game is implemented using Adobe Flash-based technologies. As an example and not by way of limitation, a game may be fully or partially implemented as a SWF object that is embedded in a web page and executable by a Flash media player plug-in. In particular embodiments, one or more described webpages may be associated with or accessed by social networking system 120a. This disclosure contemplates using any suitable application for the retrieval and rendering of structured documents hosted by any suitable network-addressable resource or website. Application event data of a game is any data relevant to the game (e.g., player inputs). In particular embodiments, each application datum has a name and a value, and the value of the application datum can change (i.e., be updated) at any time. When an update to an application datum occurs at client system 730, either caused by an action of a game player or by the game logic itself, client system 730 informs game networking system 120b of the update. For example, if the game is a farming game with a harvest mechanic (such as Zynga FarmVille), an event can correspond to a player clicking on a parcel of land to harvest a crop. In such an instance, the application event data identifies an event or action (e.g., harvest) and an object in the game to which the event or action applies. For illustration purposes and not by way of limitation, system 700 is discussed in reference to updating a multi-player online game hosted on a network-addressable system (such as, for example, social networking system 120a or game networking system 120b), where an instance of the online game is executed remotely on a client system 1030, which then transmits application event data to the hosting system such that the remote game server synchronizes game state associated with the instance executed by the client system 1030. In particular embodiment, one or more objects of a game can be represented as an Adobe Flash object. Flash manipulates vector and raster graphics, and supports bidirectional streaming of audio and video. “Flash” may mean the authoring environment, the player, or the application files. In particular embodiments, client system 1030 includes a Flash client. The Flash client is configured to receive and run Flash application or game object code from any suitable networking system (such as, for example, social networking system 120a or game networking system 120b). In particular embodiments, the Flash client runs in a browser client executed on client system 730. A player can interact with Flash objects using client system 730 and the Flash client. The Flash objects can represent a variety of in-game objects. Thus, the player performs various in-game actions on various in-game objects by make various changes and updates to the associated Flash objects. In particular embodiments, in-game actions can be initiated by clicking or similarly interacting with a Flash object that represents a particular in-game object. For example, a player can interact with a Flash object to use, move, rotate, delete, attack, shoot, or harvest an in-game object. This disclosure contemplates performing any suitable in-game action by interacting with any suitable Flash object. In particular embodiments, when the player makes a change to a Flash object representing an in-game object, the client-executed game logic updates one or more game state parameters associated with the in-game object. To ensure synchronization between the Flash object shown to the player at client system 730, the Flash client sends the events that caused the game state changes to the in-game object to game networking system 120b. However, to expedite the processing and hence the speed of the overall gaming experience, the Flash client collects a batch of some number of events or updates into a batch file. The number of events or updates determined by the Flash client dynamically or determined by game networking system 120b based on server loads or other factors. For example, client system 730 sends a batch file to game networking system 120b whenever 50 updates have been collected or after a threshold period of time, such as every minute. As used herein, the term “application event data” may refer to any data relevant to a computer-implemented game application that affects one or more game state parameters, including, for example and without limitation, changes to player data or metadata, changes to player social connections or contacts, player inputs to the game, and events generated by the game logic. In particular embodiments, each application datum has a name and a value. The value of an application datum may change at any time in response to the game play of a player or in response to the game engine (e.g., based on the game logic). In particular embodiments, an application data update occurs when the value of a specific application datum is changed. In particular embodiments, each application event datum includes an action or event name and a value (such as an object identifier). Thus, each application datum is represented as a name-value pair in the batch file. The batch file includes a collection of name-value pairs representing the application data that have been updated at client system 730. In particular embodiments, the batch file is a text file and the name-value pairs in string format. In particular embodiments, when a player plays an online game on client system 730, game networking system 120b serializes all the game-related data, including, for example and without limitation, game states, game events, user inputs, for this particular user and this particular game into a BLOB and stores the BLOB in a database. The BLOB is associated with an identifier that indicates that the BLOB contains the serialized game-related data for a particular player and a particular online game. In particular embodiments, while a player is not playing the online game, the corresponding BLOB is stored in the database. This enables a player to stop playing the game at any time without losing the current state of the game the player is in. When a player resumes playing the game next time, game networking system 120b retrieves the corresponding BLOB from the database to determine the most-recent values of the game-related data. In particular embodiments, while a player is playing the online game, game networking system 120b may also load the corresponding BLOB into a memory cache so that the game system may have faster access to the BLOB and the game-related data contained therein. Systems and Methods In particular embodiments, one or more described webpages are associated with a networking system or networking service. However, alternate embodiments may have applications for the retrieval and rendering of structured documents hosted by any type of network addressable resource or web site. Additionally, as used herein, a user may be an individual, a group, or an entity (such as a business or third party application). FIG. 8 illustrates an example computing system architecture used to implement a server 922 or a client system 930 illustrated in FIG. 9. In one embodiment, hardware system 800 comprises a processor 802, a cache memory 804, and one or more executable modules and drivers, stored on a tangible computer readable medium, directed to the functions described herein. Additionally, hardware system 800 includes a high performance input/output (I/O) bus 806 and a standard I/O bus 808. A host bridge 810 couples processor 802 to high performance I/O bus 806, whereas I/O bus bridge 812 couples the two buses 806 and 808 to each other. A system memory 814 and one or more network/communication interfaces 816 coupled to bus 806. Hardware system 800 further includes video memory (not shown) and a display device coupled to the video memory. Mass storage 818 and I/O ports 820 are coupled to bus 808. Hardware system 800 optionally includes a keyboard, a pointing device, and a display device (not shown) coupled to bus 808. Collectively, these elements are intended to represent a broad category of computer hardware systems, including but not limited to general purpose computer systems based on the x86-compatible processors manufactured by Intel Corporation of Santa Clara, Calif., and the x86-compatible processors manufactured by Advanced Micro Devices (AMD), Inc., of Sunnyvale, Calif., as well as any other suitable processor. The elements of hardware system 800 are described in greater detail below. In particular, network interface 816 provides communication between hardware system 800 and any of a wide range of networks, such as an Ethernet (e.g., IEEE 802.3) network, a backplane, etc. Mass storage 818 provides permanent storage for the data and programming instructions to perform the above-described functions implemented in servers 422, whereas system memory 814 (e.g., DRAM) provides temporary storage for the data and programming instructions when executed by processor 802. I/O ports 820 are one or more serial and/or parallel communication ports that provide communication between additional peripheral devices, which is coupled to hardware system 800. Hardware system 800 may include a variety of system architectures and various components of hardware system 800 may be rearranged. For example, cache 804 is on-chip with processor 802. Alternatively, cache 804 and processor 802 may be packed together as a “processor module,” with processor 802 being referred to as the “processor core.” Furthermore, certain embodiments of the present disclosure may not require nor include all of the above components. For example, the peripheral devices shown coupled to standard I/O bus 808 may couple to high performance I/O bus 806. In addition, in some embodiments, only a single bus may exist, with the components of hardware system 800 being coupled to the single bus. Furthermore, hardware system 800 may include additional components, such as additional processors, storage devices, or memories. An operating system manages and controls the operation of hardware system 800, including the input and output of data to and from software applications (not shown). The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. Any suitable operating system may be used, such as the LINUX Operating System, the Apple Macintosh Operating System, available from Apple Computer Inc. of Cupertino, Calif., UNIX operating systems, Microsoft® Windows® operating systems, BSD operating systems, and the like. Of course, other embodiments are possible. For example, the functions described herein may be implemented in firmware or on an application-specific integrated circuit. Particular embodiments may operate in a wide area network environment, such as the Internet, including multiple network addressable systems. FIG. 9 illustrates an example network environment, in which various example embodiments may operate. Network cloud 960 generally represents one or more interconnected networks, over which the systems and hosts described herein can communicate. Network cloud 960 includes packet-based wide area networks (such as the Internet), private networks, wireless networks, satellite networks, cellular networks, paging networks, and the like. As FIG. 9 illustrates, particular embodiments operate in a network environment comprising one or more networking systems, such as social networking system 120a, game networking system 120b, and one or more client systems 930. The components of social networking system 120a and game networking system 120b operate analogously; as such, hereinafter they may be referred to simply at networking system 920. Client systems 930 are operably connected to the network environment via a network service provider, a wireless carrier, or any other suitable means. Networking system 920 is a network addressable system that, in various example embodiments, comprises one or more physical servers 922 and data stores 924. The one or more physical servers 922 are operably connected to computer network 960 via, by way of example, a set of routers and/or networking switches 926. In an example embodiment, the functionality hosted by the one or more physical servers 922 include web or HTTP servers, FTP servers, as well as, without limitation, webpages and applications implemented using Common Gateway Interface (CGI) script, PHP Hyper-text Preprocessor (PHP), Active Server Pages (ASP), Hyper Text Markup Language (HTML), Extensible Markup Language (XML), Java, JavaScript, Asynchronous JavaScript and XML (AJAX), Flash, ActionScript, and the like. Physical servers 922 may host functionality directed to the operations of networking system 920. Hereinafter servers 922 may be referred to as server 922, although server 922 may include numerous servers hosting, for example, networking system 920, as well as other content distribution servers, data stores, and databases. Data store 924 may store content and data relating to, and enabling, operation of networking system 920 as digital data objects. A data object, in particular embodiments, is an item of digital information typically stored or embodied in a data file, database, or record. Content objects may take many forms, including: text (e.g., ASCII, SGML, HTML), images (e.g., jpeg, tif and gif), graphics (vector-based or bitmap), audio, video (e.g., mpeg), or other multimedia, and combinations thereof. Content object data may also include executable code objects (e.g., games executable within a browser window or frame), podcasts, etc. Logically, data store 924 corresponds to one or more of a variety of separate and integrated databases, such as relational databases and object-oriented databases, that maintain information as an integrated collection of logically related records or files stored on one or more physical systems. Structurally, data store 924 may generally include one or more of a large class of data storage and management systems. In particular embodiments, data store 924 may be implemented by any suitable physical system(s) including components, such as one or more database servers, mass storage media, media library systems, storage area networks, data storage clouds, and the like. In one example embodiment, data store 924 includes one or more servers, databases (e.g., MySQL), and/or data warehouses. Data store 924 may include data associated with different networking system 920 users and/or client systems 930. Client system 930 is generally a computer or computing device including functionality for communicating (e.g., remotely) over a computer network. Client system 930 may be a desktop computer, laptop computer, personal digital assistant (PDA), in- or out-of-car navigation system, smart phone or other cellular or mobile phone, or mobile gaming device, among other suitable computing devices. Client system 930 may execute one or more client applications, such as a web browser (e.g., Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Google Chrome, and Opera), to access and view content over a computer network. In particular embodiments, the client applications allow a user of client system 930 to enter addresses of specific network resources to be retrieved, such as resources hosted by networking system 920. These addresses can be Uniform Resource Locators (URLs) and the like. In addition, once a page or other resource has been retrieved, the client applications may provide access to other pages or records when the user “clicks” on hyperlinks to other resources. By way of example, such hyperlinks may be located within the webpages and provide an automated way for the user to enter the URL of another page and to retrieve that page. A webpage or resource embedded within a webpage, which may itself include multiple embedded resources, may include data records, such as plain textual information, or more complex digitally encoded multimedia content, such as software programs or other code objects, graphics, images, audio signals, videos, and so forth. One prevalent markup language for creating webpages is the Hypertext Markup Language (HTML). Other common web browser-supported languages and technologies include the Extensible Markup Language (XML), the Extensible Hypertext Markup Language (XHTML), JavaScript, Flash, ActionScript, Cascading Style Sheet (CSS), and, frequently, Java. By way of example, HTML enables a page developer to create a structured document by denoting structural semantics for text and links, as well as images, web applications, and other objects that can be embedded within the page. Generally, a webpage may be delivered to a client as a static document; however, through the use of web elements embedded in the page, an interactive experience may be achieved with the page or a sequence of pages. During a user session at the client, the web browser interprets and displays the pages and associated resources received or retrieved from the website hosting the page, as well as, potentially, resources from other websites. When a user at a client system 930 desires to view a particular webpage (hereinafter also referred to as target structured document) hosted by networking system 920, the user's web browser, or other document rendering engine or suitable client application, formulates and transmits a request to networking system 920. The request generally includes a URL or other document identifier as well as metadata or other information. By way of example, the request may include information identifying the user, such as a user ID, as well as information identifying or characterizing the web browser or operating system running on the user's client computing device 930. The request may also include location information identifying a geographic location of the user's client system or a logical network location of the user's client system. The request may also include a timestamp identifying when the request was transmitted. Although the example network environment described above and illustrated in FIG. 9 described with respect to social networking system 120a and game networking system 120b, this disclosure encompasses any suitable network environment using any suitable systems. As an example and not by way of limitation, the network environment may include online media systems, online reviewing systems, online search engines, online advertising systems, or any combination of two or more such systems. Furthermore, the above-described elements and operations can be comprised of instructions that are stored on non-transitory storage media. The instructions can be retrieved and executed by a processing system. Some examples of instructions are software, program code, and firmware. Some examples of non-transitory storage media are memory devices, tape, disks, integrated circuits, and servers. The instructions are operational when executed by the processing system to direct the processing system to operate in accord with the disclosure. The term “processing system” refers to a single processing device or a group of inter-operational processing devices. Some examples of processing devices are integrated circuits and logic circuitry. Those skilled in the art are familiar with instructions, computers, and storage media. Miscellaneous One or more features from any embodiment may be combined with one or more features of any other embodiment without departing from the scope of the disclosure. A recitation of “a”, “an,” or “the” is intended to mean “one or more” unless specifically indicated to the contrary. In addition, it is to be understood that functional operations, such as “awarding”, “locating”, “permitting” and the like, are executed by game application logic that accesses, and/or causes changes to, various data attribute values maintained in a database or other memory. The present disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly, where appropriate, the appended claims encompass all changes, substitutions, variations, alterations, and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. For example, the methods, game features and game mechanics described herein may be implemented using hardware components, software components, and/or any combination thereof. By way of example, while embodiments of the present disclosure have been described as operating in connection with a networking website, various embodiments of the present disclosure can be used in connection with any communications facility that supports web applications. Furthermore, in some embodiments the term “web service” and “website” may be used interchangeably and additionally may refer to a custom or generalized API on a device, such as a mobile device (e.g., cellular phone, smart phone, personal GPS, personal digital assistance, personal gaming device, etc.), that makes API calls directly to a server. Still further, while the embodiments described above operate with business-related virtual objects (such as stores and restaurants), the invention can be applied to any in-game asset around which a harvest mechanic is implemented, such as a virtual stove, a plot of land, and the like. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the disclosure as set forth in the claims and that the disclosure is intended to cover all modifications and equivalents within the scope of the following claims. 1. A computer-implemented method comprising: receiving a selection of at least one social network user by a player of an online game;sending to a social network account of a selected social network user a notification to perform an online game action; andcrediting the player with an in-game reward based on the selected social network user performing the online game action. 2. The computer-implemented method of claim 1, wherein sending to a social network account of a selected social network user a notification to perform an online game action comprises: detecting an absence of a mobile version of the online game accessible via a mobile computing platform; andidentifying a substitute online game available via the mobile computing platform. 3. The computer-implemented method of claim 2, wherein crediting the player with an in-game reward based on the selected social network user performing the online game action comprising: detecting access of the notification by the selected social network user via a mobile computing device associated with the selected social network user;determining whether the substitute online game is installed on the mobile computing device associated with the selected social network user;upon determining the substitute online game is not installed, triggering display of an installation webpage on the mobile computing device associated with the selected social network user, the installation webpage providing for installation of the substitute online game; andupon determining the substitute online game is installed, triggering display of a game state webpage on the mobile computing device associated with the selected social network user, the game state webpage providing for initiation of a game session of the substitute online game. 4. The computer-implemented method of claim 3, further comprising: providing the player with the in-game reward in the online game based on the selected social network user performing one of: installation of the substitute online game and initiation of the game session of the substitute online game. 5. The computer-implemented method of claim 1, comprising: prior to receiving a selection of at least one social network user by a player of an online game: identifying a plurality of social network users having a social network connection with a social network account of the player;filtering the plurality of social network users to identify a subset of the plurality of social network users who have not previously installed the online game;generating a list of filtered users based on the subset of the plurality of social network users; andproviding the list of filtered user for display to the player. 6. The computer-implemented method of claim 5, wherein receiving a selection of at least one social network user by a player of an online game comprises: receiving selection of at least one social network user by the player from the list of filtered users. 7. The computer-implemented method of claim 5, wherein filtering the plurality of social network users to identify a subset of the plurality of social network users comprises: receiving a policy from the social network;determining a first social network user is included in the subset in accordance with the policy; anddetermining a second social network user is not included in the subset in accordance with the policy. 8. A non-transitory machine-readable storage medium storing instructions which, when executed by one or more processors, cause the one or more processors to perform operations comprising: receiving a selection of at least one social network user by a player of an online game;sending to a social network account of a selected social network user a notification to perform an online game action; andcrediting the player with an in-game reward based on the selected social network user performing the online game action. 9. The non-transitory machine-readable storage medium of claim 8, wherein sending to a social network account of a selected social network user a notification to perform an online game action comprises: detecting an absence of a mobile version of the online game accessible via a mobile computing platform; andidentifying a substitute online game available via the mobile computing platform. 10. The non-transitory machine-readable storage medium of claim 9, wherein crediting the player with an in-game reward based on the selected social network user performing the online game action comprising: detecting access of the notification by the selected social network user via a mobile computing device associated with the selected social network user;determining whether the substitute online game is installed on the mobile computing device associated with the selected social network user;upon determining the substitute online game is not installed, triggering display of an installation webpage on the mobile computing device associated with the selected social network user, the installation webpage providing for installation of the substitute online game; andupon determining the substitute online game is installed, triggering display of a game state webpage on the mobile computing device associated with the selected social network user, the game state webpage providing for initiation of a game session of the substitute online game. 11. The non-transitory machine-readable storage medium of claim 10, further comprising: providing the player with the in-game reward in the online game based on the selected social network user performing one of: installation of the substitute online game and initiation of the game session of the substitute online game. 12. The non-transitory machine-readable storage medium of claim 8, comprising: prior to receiving a selection of at least one social network user by a player of an online game: identifying a plurality of social network users having a social network connection with a social network account of the player;filtering the plurality of social network users to identify a subset of the plurality of social network users who have not previously installed the online game;generating a list of filtered users based on the subset of the plurality of social network users; andproviding the list of filtered user for display to the player. 13. The non-transitory machine-readable storage medium of claim 12, wherein receiving a selection of at least one social network user by a player of an online game comprises: receiving selection of at least one social network user by the player from the list of filtered users. 14. The non-transitory machine-readable storage medium of claim 12, wherein filtering the plurality of social network users to identify a subset of the plurality of social network users comprises: receiving a policy from the social network;determining a first social network user is included in the subset in accordance with the policy; anddetermining a second social network user is not included in the subset in accordance with the policy. 15. A computer system comprising: a processor;a memory device holding an instruction set executable on the processor to cause the computer system to perform operations comprising:receiving a selection of at least one social network user by a player of an online game;sending to a social network account of a selected social network user a notification to perform an online game action; andcrediting the player with an in-game reward based on the selected social network user performing the online game action. 16. The computer system of claim 15, wherein sending to a social network account of a selected social network user a notification to perform an online game action comprises: detecting an absence of a mobile version of the online game accessible via a mobile computing platform; andidentifying a substitute online game available via the mobile computing platform. 17. The computer system of claim 16, wherein crediting the player with an in-game reward based on the selected social network user performing the online game action comprising: detecting access of the notification by the selected social network user via a mobile computing device associated with the selected social network user;determining whether the substitute online game is installed on the mobile computing device associated with the selected social network user;upon determining the substitute online game is not installed, triggering display of an installation webpage on the mobile computing device associated with the selected social network user, the installation webpage providing for installation of the substitute online game; andupon determining the substitute online game is installed, triggering display of a game state webpage on the mobile computing device associated with the selected social network user, the game state webpage providing for initiation of a game session of the substitute online game. 18. The computer system of claim 17, further comprising: providing the player with the in-game reward in the online game based on the selected social network user performing one of: installation of the substitute online game and initiation of the game session of the substitute online game. 19. The computer system of claim 15, comprising: prior to receiving a selection of at least one social network user by a player of an online game: identifying a plurality of social network users having a social network connection with a social network account of the player;filtering the plurality of social network users to identify a subset of the plurality of social network users who have not previously installed the online game;generating a list of filtered users based on the subset of the plurality of social network users; andproviding the list of filtered user for display to the player. 20. The computer system of claim 19, wherein receiving a selection of at least one social network user by a player of an online game comprises: receiving selection of at least one social network user by the player from the list of filtered users; andwherein filtering the plurality of social network users to identify a subset of the plurality of social network users comprises:receiving a policy from the social network;determining a first social network user is included in the subset in accordance with the policy; anddetermining a second social network user is not included in the subset in accordance with the policy.